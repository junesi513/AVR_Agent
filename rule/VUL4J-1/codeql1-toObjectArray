/**
 * @name DataFlow Analysis for toObjectArray
 * @description The method `toObjectArray` deserializes JSON data using a potentially vulnerable JSON parser.  If the input `array` contains malicious data, it could lead to arbitrary code execution or other security vulnerabilities depending on the underlying JSON library used by `DefaultJSONParser`.
 * @kind problem
 * @problem.severity high
 * @id java/vuln-1-toObjectArray-dataflow
 */

import java
import semmle.code.java.dataflow.DataFlow

class VulnSource extends DataFlow::Node {
  VulnSource() {
    this.asParameter().getName().matches("parser")
  }
}

class VulnSink extends DataFlow::Node {
  VulnSink() {
    exists(MethodAccess ma |
      ma.getMethod().getName().matches("parseArray") and
      this.asExpr() = ma
    )
  }
}



class VulnConfig extends DataFlow::Configuration {
  VulnConfig() { this = "VulnConfig" }
  
  override predicate isSource(DataFlow::Node source) {
    source instanceof VulnSource
  }
  
  override predicate isSink(DataFlow::Node sink) {
    sink instanceof VulnSink
  }
  
  override predicate isBarrier(DataFlow::Node node) {
    none()
  }
}

from VulnConfig config, DataFlow::Node source, DataFlow::Node sink
where config.hasFlow(source, sink)
select sink, "DataFlow: Unsafe Deserialization from $@ to $@",
       source, "source", sink, "sink"
